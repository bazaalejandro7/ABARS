import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import jxl.*;
import jxl.read.biff.BiffException;


/**
 * @author Matthew Alpert and Alejandro Baza
 * @version 1.8
 * @created 16-Oct-2014 3:32:01 AM
 * This class utilizes the open source API JExcel.
 * Using JExcel, this class reads in and creates all
 * the students objects in the database.
 */
public class StudentDatabase {

	private ArrayList<Student> studentList;
	public File file;
	BufferedWriter writer = null;
	
	/**
	 * @author Matthew Alpert
	 * @throws BiffException
	 * @throws IOException
	 * Constructs the student database
	 */
	public StudentDatabase() throws BiffException, IOException{
		
		file = new File("StudentDb.txt");
		writer = new BufferedWriter(new FileWriter(file));
		
		writer.write("This is the new database!");
//		writer.close();
		Workbook workbook = Workbook.getWorkbook(new File("Student Database.xls"));
		Sheet sheet = workbook.getSheet(0);
		CourseDatabase courseList = new CourseDatabase();
		Student newStudent; //student object holder
		
		//arrays of types of course objects inside a student object
		ArrayList<GradedCourse> coursesTaken = new ArrayList<GradedCourse>();
		ArrayList<BidCourse> bidCourse = new ArrayList<BidCourse>();
		ArrayList<Course> currentSchedule = new ArrayList<Course>();
		
		int numID, numPoints;
		String password, username, name, address;
		studentList = new ArrayList<Student>();
		Cell[] topRow =  sheet.getRow(0);
		Cell[] cur = sheet.getRow(1);
		int countRow = 1;
		int i;

		//		adding in all the students in the database
		while(!(cur[0].getContents().equals("end"))){
			System.out.println(cur[0].getContents());
			username = cur[0].getContents(); //username
			password = cur[1].getContents(); //password
			numID = Integer.parseInt(cur[2].getContents()); //ID number
			name = cur[3].getContents(); //student name
			address = cur[4].getContents(); // personal address
			numPoints = Integer.parseInt(cur[5].getContents()); //number of points available to bid
			i = 6;
			//clear arrays of course types
			coursesTaken.clear();
			bidCourse.clear();
			currentSchedule.clear();

			//creates the list of all courses types a student has taken, taking, or bid for
			while(i < topRow.length && topRow[i].getType() != CellType.EMPTY){

				//the contents will be a letter if the course is current or already taken
				if(cur[i].getType() == CellType.LABEL){
					if(cur[i].getContents().equals("I")){ //if the course has an I, it means it is a current course
						currentSchedule.add(courseList.getCourse(topRow[i].getContents()));
					}else{
						coursesTaken.add(addGradedCourse(courseList.getCourse(topRow[i].getContents()), cur[i].getContents()));
					}
					
				//if the course is not currently in the schedule or already taken, it could be a bidded course //make this part more efficient in the future
				}else if((cur[i].getType() == CellType.NUMBER) && (Integer.parseInt(cur[i].getContents()) > 0)){
					bidCourse.add(addBidCourse(courseList.getCourse(topRow[i].getContents()), Integer.parseInt(cur[i].getContents())));
				}
				i++;
			}

			//			creates the student object and adds it to the list
			newStudent = new Student(coursesTaken, bidCourse, currentSchedule, numID, numPoints, password, username, name, address, countRow-1);
			studentList.add(newStudent);
			countRow++;
			cur = sheet.getRow(countRow);
		}
	}

	/**
	 * @author Matthew Alpert
	 * @param username 
	 * @return given the username, it searches for a student with given username.
	 * Returns the student object if a match is found, otherwise returns null.
	 */
	private Student searchFor(String username){

		int i = 0;

		while(i<studentList.size() && !(studentList.get(i).getUsername().equals(username))){
			i++;
		}

		if(i == studentList.size()){
			return null;
		}else{
			return studentList.get(i);
		}
	}

	/**
	 * @author Matthew Alpert
	 * @param username - input username
	 * @param password - input password
	 * @return validation to the Login class whether or not the user information will grant access.
	 */
	public Student Validate(String username, String password){
		Student user = searchFor(username);
		if(user != null && password.equals(user.getPassword())){
			return user;
		}else{
			return null;
		}
	}

	/**
	 * @author Matthew Alpert
	 * @param taken - input taken Course object
	 * @param grade - letter grade received in the course
	 * @return a GradedCourse object
	 */
	private GradedCourse addGradedCourse(Course taken, String grade){

		return new GradedCourse(taken.getCourseNum(), taken.getCredits(), taken.getCorequisite(), 
				taken.getPrerequisites(), taken.getCourseDescription(), taken.getTimeSlot(), taken.getDataColCourse(), grade);

	}

	/**
	 * @author Matthew Alpert
	 * @param bidC - input of bid Course object
	 * @param bidPoints - number of bidded points
	 * @return a BidCourse object
	 */
	private BidCourse addBidCourse(Course bidC, int bidPoints){
		return new BidCourse(bidC.getCourseNum(), bidC.getCredits(), bidC.getCorequisite(), 
				bidC.getPrerequisites(), bidC.getCourseDescription(), bidC.getTimeSlot(), bidC.getDataColCourse(), bidPoints);
	}
	
	
	
	/**
	 * @author Alejandro Baza
	 * This method puts the courses that the student bid for into a list that will be the schedule
	 * 
	 */

	public void ScheduleList() {
	}
}


//end StudentDatabase